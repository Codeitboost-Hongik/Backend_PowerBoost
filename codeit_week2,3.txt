자바스크립트

변수 선언 
  let 변수명;
  '대문자'와 '소문자'를 구별
  식별자는 '문자(a-z, A-Z)', '밑줄(_)' 혹은 '달러 기호($)'로 시작해야 합니다. 두 번째 글자부터는 '숫자(0-9)'도 가능

출력
  console.log( ~~~ );
  따음표를 출력하는 방법
  1. " ~~'~~~" 서로 다른 따음표를 이용
  2. \(역슬래시) 를 활용 : 따음표 앞에 \를 사용
  3. `` (back tick) 을 활용하면,     `` 안에 있는 따음표는 모두 그대로 출력된다.


'==' 와 '!=' 는 value(값) 만 비교 (피연산자의 특정값이 형변환이 되어 비교가 됨)
'===' 와 '!==' 는 value(값)과 Datatype(데이터 타입)까지 비교

자료형
  Number
  String
  Boolean
  null
  undefined
  Object
  //Object를 제외하고 모두 자료형의 기본형이라 한다.
  //Object는 참조형이다.

형변환
  Number(값)
  String(값)
  Boolean(값)
  자동형변환
      + 연산자 : 숫자를 더하는 기능보다 문자열을 더하는 기능이 치중되어있음
      => 숫자와 문자열 type의 값을 + 할 경우 문자열더하기방법으로 결과를 도출 4+'2' = 42
      4 + true = 5
      나머지연산자는 숫자연산 기능뿐이기에, 모두 숫자(number)로 형변환하여 계산함.
      NaN은 어떤 값과 어떤 연산을 진행하더라도 NaN값이 됨.
      비교연산자의 경우에도  값을 숫자로 자동형변환되어 비교를함(boolean)
      비교연산시 비교불가능한 값(NaN)이 피연산자에 포함이 되어있다면, false를 도출함.
      동등비교   ==, !=   : 형변환이 이루어짐.


${   } 안에 삽입하면 원하는 결과값을 도출 가능.
ex)
console.log(`${name}님의 근무 시간은 총 ${time}시간이며, 최종 급여는 ${total}원 입니다.`); 


객체 { }  로 묶어서 생성
  객체에는 각각의 속성(property)들의 집합
  속성은 key(property Name)와 value(property Value)로 이루어짐

객체 접근 방법
    객체명.propertyName
    객체명[propertyName]
    . 으로 객체에 접근하는 경우에는 속성조건1,2,3을 모두 만족시키는 propertyName만 사용가능
    [ ]로 객체에 접근하는 경우에는 [ ]에 수식으로 표현할 수 있어 유연한 접근이 가능(단 문자열을 표시하는 ' '로 무조건 묶어줘야함)

객체의 값 변경
  codeit.ceo = 새로운값;

객체에 새로운 property 추가
  codeit.sss = 'sss';
  기존에 없는 property를 그냥 작성하면 됨

객체의 property 삭제
  delete codeit.ceo;
  즉, delete 삭제하는 property;

객체의 property값으로 함수를 삽입 할 수 있다. 이때의 함수는 method함수라고 한다.
  sayhello: function (name){ console.log(`hello ${name}!`}}
  greeting.sayhello('eunsoo');
  greeting['sayhello']('eunsoo');

배열도 객체이다
  typeof 배열명
  =>object
  배열명.length
  이는 배열명['length']과 같다.

  인덱스 삭제
    delete 배열명[index];
    요소만 삭제되었을 뿐, 해당 인덱스는 empty(=undefined)로 남게된다..

  배열명.splice(수식);
    배열의 요소와 인덱스 자체를 삭제
    수식종류
    1. 인덱스 : 인덱스부터 뒤의 모든 인덱스를 삭제
    2. 인덱스, 개수 : 인덱스부터 개수만큼 인덱스 삭제
    3.인덱스, 개수, 새로운요소 : 인덱스부터 개수만큼 인덱스를 삭제하고 그 자리에 새로운 요소를 삽입(새로운 요소는 여러개가 될 수 있음)
    =>개수를 0으로 하면 인덱스 번호 뒤로 새로운요소가 삽입됨.

  배열명.shift();		배열의 첫 요소및 인덱스 삭제
  배열명.pop();		배열의 마지막 요소및 인덱스 삭제
  배열명.unshift(요소값);	배열의 첫 요소에 값을 추가(인덱스0에 추가함)
  배열명.push(요소값);	배열의 마지막 요소에 값을 추가(마지막 인덱스에 추가함)


숫자도 객체이다
  숫자형 메소드
  메소드  .toFixed(number) =>number는 소수점아래 유효숫자자리수
  .toFixed(number) 로 생성된 값은 문자열(string)이다.

string(문자열)은 인덱스로 접근해서 임의로 변경이 불가능하다.(변경 불가능)
